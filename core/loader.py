from Py2P.core import sync
import os
import numpy as np
import warnings
import json

class Dataloader():

    def __init__(self, group:int=0):
        
        self.Fraw = None
        self.Fneu = None
        self.iscell = None
        self.spks = None
        self.stat = None
        self.ops = None

        self.sync = None
        self.data_path = None
        self.group = group

    def load_sync(self, sync_file, stim_dict, trials_names=None):

        self.sync = sync.Sync().generate_data_structure(sync_file, stim_dict, trials_names)
        print("> Sync object generated")

    def load_data_suite2p(self, data_path):

        '''
        Load data from the output files generated by Suite2p program.
        
        - data_path: str
            absolute path to the directory containing the files generated by Suite2p.
            
        '''
        self.data_path = data_path

        expected_files = [
                            "F.npy",
                            "Fneu.npy",
                            "iscell.npy",
                            "spks.npy",
                            "stat.npy",
                            "ops.npy",
                        ]

        if not os.path.isdir(data_path):

            raise Exception("ERROR: Please provide a valid data path to the suite2p output direcory")
        
        files = os.listdir(data_path)

        # F.npy is mandatory

        if "F.npy" not in files:

            raise Exception("ERROR: F.npy not found in %s" % (data_path))

        # load data
        print("\n> loading data from %s ..." % data_path, end=" ")

        self.Fraw = np.load(data_path + r"/F.npy")

        try:
            self.Fneu = np.load(data_path + r"/Fneu.npy")
        except:
             warnings.warn("WARNING:",
             "Fneu.npy not found in %s"%data_path, RuntimeWarning)
        try:
            self.spks = np.load(data_path + r"/spks.npy")
        except:
             warnings.warn("WARNING:",
              "spks.npy not found in %s"%data_path, RuntimeWarning)
        try:
            self.iscell = np.load(data_path + r"/iscell.npy")
        except:
             warnings.warn("WARNING:",
              "iscell.npy not found in %s"%data_path, RuntimeWarning)
        try:
            self.stat = np.load(data_path + r"/stat.npy", allow_pickle=True)
        except:
             warnings.warn("WARNING:",
              "stat.npy not found in %s"%data_path, RuntimeWarning)
        try:
            self.ops = np.load(data_path + r"/ops.npy", allow_pickle=True)
        except:
             warnings.warn("WARNING:",
              "ops.npy not found in %s"%data_path, RuntimeWarning)

        self.nframes = self.Fraw.shape[1]
        self.ncells = self.Fraw.shape[0]

        print("Loaded data of size %dx%d\n"%(self.ncells, self.nframes))

        return self
    
    def load_data(self, data_path):

        '''
        Load fluoressence traces from a single serialized file. 
        Supported formats: .csv , .npy , .mat
        
        - data_path: str
            absolute path to the file containing the fluoressence traces.
            
        '''
        supported_fmt = ['.csv', '.npy']

        ext = os.path.splitext(data_path)[1]

        self.data_path = data_path

        if ext not in supported_fmt:

            raise Exception("ERROR: Please provide a data path to a supported file.",
                            "\nSupported formats are: {} {}".format(*supported_fmt))
        
        # load data
        print("> loading data from %s ..." % data_path, end=" ")

        if ext == '.npy':
            data = np.load(data_path)
        elif ext == '.csv':
            data = np.loadtxt(data_path, delimiter=',', dtype=np.float64, skiprows=1)

        self.Fraw = data

        if not isinstance(self.Fraw[0],np.ndarray):
            self.Fraw = np.array([self.Fraw])

        self.nframes = self.Fraw.shape[1]            
        self.ncells = self.Fraw.shape[0]

        print("Loaded arrays of size %dx%d\n"%(self.ncells, self.nframes))

        return self

        